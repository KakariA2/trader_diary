from flask import Flask, render_template, request, redirect, session, url_for, flash
import sqlite3
import os
import shutil
import datetime
import smtplib
from email.mime.text import MIMEText
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'trader_diary_secret_key'  # —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Å–µ—Å—Å–∏–π

# –ü–µ—Ä–µ–≤–æ–¥—ã
translations = {
    'ru': {
        'title': '–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞',
        'total_profit': '–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫',
        'profit_by_pair': '–ü—Ä–∏–±—ã–ª—å –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º',
        'pair': '–ü–∞—Ä–∞',
        'date': '–î–∞—Ç–∞',
        'type': '–¢–∏–ø',
        'lot': '–õ–æ—Ç',
        'profit_loss': '–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫',
        'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        'buy': 'Buy',
        'sell': 'Sell',
        'save': 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        'support': '–£–≥–æ—Å—Ç–∏ –∫–æ—Ñ–µ –∑–∞ —É–¥–∞—á–Ω—É—é —Å–¥–µ–ª–∫—É',
        'buymeacoffee': 'Buymeacoffee',
        'paypal': 'PayPal',
        'boosty': 'Boosty',
    }
}

# ======= Email –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö =======
def send_error_email(message):
    sender = "mizarand@gmail.com"
    app_password = os.environ.get("APP_EMAIL_PASSWORD", "MonitorA2")  # –ª—É—á—à–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ env
    receiver = "mizarand@inbox.lv"

    msg = MIMEText(message)
    msg["Subject"] = "‚ùó Trader Diary ‚Äî –û—à–∏–±–∫–∞ / –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
    msg["From"] = sender
    msg["To"] = receiver

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(sender, app_password)
            server.sendmail(sender, receiver, msg.as_string())
    except Exception as e:
        print(f"[Email] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

# ======= –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö =======
def backup_db():
    now = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M')
    backup_path = f"backup/trader_diary_backup_{now}.db"
    try:
        if not os.path.exists("backup"):
            os.makedirs("backup")
        shutil.copy('trader_diary.db', backup_path)
        print(f"[–ë—ç–∫–∞–ø] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ–ø–∏—è –±–∞–∑—ã: {backup_path}")
    except Exception as e:
        print(f"[–ë—ç–∫–∞–ø] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")

# ======= –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î =======
def get_db_connection():
    conn = sqlite3.connect('trader_diary.db')
    conn.row_factory = sqlite3.Row
    return conn

# ======= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î =======
def init_db():
    conn = sqlite3.connect('trader_diary.db')
    conn.execute('''
        CREATE TABLE IF NOT EXISTS trades (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pair TEXT NOT NULL,
            date TEXT NOT NULL,
            type TEXT NOT NULL,
            lot REAL NOT NULL,
            profit REAL NOT NULL,
            comment TEXT
        )
    ''')
    conn.execute('''
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            email TEXT,
            subject TEXT,
            message TEXT,
            date TEXT
        )
    ''')
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL UNIQUE,
            email TEXT NOT NULL UNIQUE,
            password_hash TEXT NOT NULL,
            subscription_status TEXT NOT NULL DEFAULT 'trial',
            trial_start_date TEXT,
            premium_end_date TEXT
        )
    ''')
    conn.commit()
    conn.close()

# ======= –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ =======
@app.route('/')
def index():
    lang = request.args.get('lang', 'ru')
    texts = translations.get(lang, translations['ru'])

    from datetime import datetime

    try:
        selected_year = int(request.args.get('year', datetime.now().year))
        selected_month = int(request.args.get('month', datetime.now().month))
    except ValueError:
        selected_year = datetime.now().year
        selected_month = datetime.now().month

    current_year = datetime.now().year
    years = list(range(current_year - 4, current_year + 1))

    months = [
        (1, "–Ø–Ω–≤–∞—Ä—å"), (2, "–§–µ–≤—Ä–∞–ª—å"), (3, "–ú–∞—Ä—Ç"), (4, "–ê–ø—Ä–µ–ª—å"),
        (5, "–ú–∞–π"), (6, "–ò—é–Ω—å"), (7, "–ò—é–ª—å"), (8, "–ê–≤–≥—É—Å—Ç"),
        (9, "–°–µ–Ω—Ç—è–±—Ä—å"), (10, "–û–∫—Ç—è–±—Ä—å"), (11, "–ù–æ—è–±—Ä—å"), (12, "–î–µ–∫–∞–±—Ä—å")
    ]

    conn = get_db_connection()
    query = """
        SELECT * FROM trades
        WHERE strftime('%Y', date) = ? AND strftime('%m', date) = ?
        ORDER BY date DESC
    """
    trades = conn.execute(query, (str(selected_year), f"{selected_month:02d}")).fetchall()
    conn.close()

    total_profit = sum(trade['profit'] for trade in trades)
    profit_by_pair = {}
    for trade in trades:
        pair = trade['pair']
        profit_by_pair[pair] = profit_by_pair.get(pair, 0) + trade['profit']

    return render_template('index.html',
                           trades=trades,
                           total_profit=total_profit,
                           profit_by_pair=profit_by_pair,
                           texts=texts,
                           lang=lang,
                           years=years,
                           months=months,
                           selected_year=selected_year,
                           selected_month=selected_month)

# ======= –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ =======
@app.route('/add', methods=['POST'])
def add_trade():
    try:
        pair = request.form['pair'].upper()
        date = request.form['date'].replace('T', ' ')
        type_ = request.form['type']
        lot = float(request.form['lot'])
        profit = float(request.form['profit'])
        comment = request.form.get('comment', '')

        conn = get_db_connection()
        conn.execute(
            'INSERT INTO trades (pair, date, type, lot, profit, comment) VALUES (?, ?, ?, ?, ?, ?)',
            (pair, date, type_, lot, profit, comment)
        )
        conn.commit()
        conn.close()

        lang = request.args.get('lang', 'ru')
        return redirect(f"/?lang={lang}")
    except Exception as e:
        send_error_email(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:\n{str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}"

# ======= –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å =======
@app.route('/feedback', methods=['GET', 'POST'])
def feedback():
    confirmation = ""
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        subject = request.form['subject']
        message = request.form['message']
        date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')

        try:
            conn = get_db_connection()
            conn.execute(
                'INSERT INTO feedback (name, email, subject, message, date) VALUES (?, ?, ?, ?, ?)',
                (name, email, subject, message, date)
            )
            conn.commit()
            conn.close()
        except Exception as e:
            send_error_email(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ feedback]\n\n{str(e)}")

        try:
            send_error_email(f"[–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å]\n–û—Ç: {name}\nEmail: {email}\n–¢–µ–º–∞: {subject}\n\n{message}")
        except:
            pass

        confirmation = "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"

    return render_template('feedback.html', confirmation=confirmation)

# ======= –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è =======
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        email = request.form.get('email', '').strip()
        password = request.form.get('password', '')
        confirm_password = request.form.get('confirm_password', '')

        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.')
            return redirect('/register')

        hashed_password = generate_password_hash(password)

        conn = get_db_connection()
        try:
            conn.execute(
                "INSERT INTO users (username, email, password_hash, subscription_status, trial_start_date) VALUES (?, ?, ?, 'trial', ?)",
                (username, email, hashed_password, datetime.datetime.now().strftime('%Y-%m-%d'))
            )
            conn.commit()
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.')
            return redirect('/login')
        except sqlite3.IntegrityError:
            flash('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        finally:
            conn.close()

    return render_template('register.html')

# ======= –í—Ö–æ–¥ =======
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email', '').strip()
        password = request.form.get('password', '')

        conn = get_db_connection()
        user = conn.execute("SELECT * FROM users WHERE email = ?", (email,)).fetchone()
        conn.close()

        if user and check_password_hash(user['password_hash'], password):
            session['user_id'] = user['id']
            session['username'] = user['username']
            session['subscription_status'] = user['subscription_status']
            flash(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user["username"]}!')
            return redirect('/')
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')

    return render_template('login.html')

# ======= –í—ã—Ö–æ–¥ =======
@app.route('/logout')
def logout():
    session.clear()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.')
    return redirect('/')

# ======= –ó–∞–ø—É—Å–∫ =======
if __name__ == "__main__":
    init_db()
    backup_db()
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=True, host="0.0.0.0", port=port)
